# Unique Binary Search Trees II

# One-time pass! Yay! Be careful with 0.

# Given an integer n, generate all structurally unique BST's (binary search trees) that store values 1...n.
# 
# For example,
# Given n = 3, your program should return all 5 unique BST's shown below.
# 
#    1         3     3      2      1
#     \       /     /      / \      \
#      3     2     1      1   3      2
#     /     /       \                 \
#    2     1         2                 3

# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def generateTrees(self, n):
        """
        :type n: int
        :rtype: List[TreeNode]
        """
        # store [i - 1][j - 1] denotes the array of trees generated by i ... j
        if n == 0:
            return []
        store = [[[] for i in range(n)] for j in range(n)]
        for i in range(n):
            store[i][i] = [TreeNode(i + 1)]
        for end in range(n):
            for start in range(end - 1, -1, -1):
                for root in range(start, end + 1):
                    if start == root:
                        for rightTree in store[root + 1][end]:
                            tree = TreeNode(root + 1)
                            tree.right = rightTree
                            store[start][end].append(tree)
                    elif end == root:
                        for leftTree in store[start][root - 1]:
                            tree = TreeNode(root + 1)
                            tree.left = leftTree
                            store[start][end].append(tree)
                    else:
                        for leftTree in store[start][root - 1]:
                            for rightTree in store[root + 1][end]:
                                tree = TreeNode(root + 1)
                                tree.left = leftTree
                                tree.right = rightTree
                                store[start][end].append(tree)
        return store[0][n - 1]
